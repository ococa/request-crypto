"use strict";var r=require("axios");const t=(r=16,t="high")=>{const e=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"],n=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],o=[0,1,2,3,4,5,6,7,8,9],s=["!","@","-","_","=","<",">","#","*","%","+","&","^","$"],a=[];let i="";const u=function(...r){let t="";return r.forEach((r=>{t+=r[Math.floor(Math.random()*r.length)]})),t};switch(t){case"high":i+=u(e,n,o,s),a.push(...e,...n,...o,...s);break;case"medium":i+=u(e,n,o),a.push(...e,...n,...o);break;default:i+=u(e,o),a.push(...e,...o)}const c=r-i.length;for(let r=0;r<c;r++)i+=u(a);return i};exports.createRequestInstance=(t,e={})=>{const n=r.create(t);return function(r,t={}){const{encryptFn:e,decryptFn:n}=t;e&&r.interceptors.request.use((r=>{const t=r.transformRequest;if(!t)throw new Error(`request ${r} has no transformRequest`);if(!Array.isArray(t))throw new Error(`transformRequest ${t} is not an array`);if(t.push(e),!n)return r;const o=r.transformResponse;if(!o)throw new Error(`request ${r} has no transformResponse`);if("function"!=typeof n)throw new Error(`decryptFn ${n} is not a function`);if(!Array.isArray(o))throw new Error(`transformResponse ${o} is not an array`);return o.unshift(n),r}))}(n,e),n},exports.getCryptoInfo=r=>({...{key:t(16,"high"),algorithm:r||"SM4"}}),exports.getSm4EncryptConfig=()=>({mode:"ecb",padding:"pkcs#7",output:"array"}),exports.randomPassword=t;
